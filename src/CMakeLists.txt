set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads)
find_package(TBB)
find_package(PAPI)

add_library(threading STATIC EXCLUDE_FROM_ALL util/threading.cpp)
target_compile_features(threading PUBLIC cxx_std_17)
target_include_directories(threading PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/util)
target_link_libraries(threading PUBLIC Threads::Threads)

add_library(thread_coordination INTERFACE)
target_link_libraries(thread_coordination INTERFACE threading)
target_sources(thread_coordination INTERFACE util/thread_coordination.hpp)

add_library(benchmark_base INTERFACE)
target_include_directories(benchmark_base INTERFACE "${CMAKE_SOURCE_DIR}/third_party" "${CMAKE_CURRENT_SOURCE_DIR}/util")
target_compile_options(benchmark_base INTERFACE $<$<CONFIG:Release>:-march=native>)
if(CMAKE_COMPILER_IS_GNUCXX)
  target_link_options(benchmark_base INTERFACE $<$<CONFIG:Release>:-flto>)
endif()
target_compile_options(benchmark_base INTERFACE ${WARNING_FLAGS})
target_compile_definitions(benchmark_base INTERFACE L1_CACHE_LINESIZE=${L1_CACHE_LINESIZE})
target_compile_definitions(benchmark_base INTERFACE PAGESIZE=${PAGESIZE})
target_compile_features(benchmark_base INTERFACE cxx_std_17)

if(MULTIQUEUE_EXP_PC)
  if(PAPI_FOUND)
    target_link_libraries(benchmark_base INTERFACE PAPI::PAPI)
    target_compile_definitions(benchmark_base INTERFACE USE_PAPI)
  else()
    message(SEND_ERROR "PAPI library not found")
  endif()
endif()
if(MULTIQUEUE_EXP_PGO)
  target_compile_options(benchmark_base INTERFACE "-fprofile-generate")
  target_link_options(benchmark_base INTERFACE "-fprofile-generate")
endif()
if(MULTIQUEUE_EXP_PGO_USE)
  target_compile_options(benchmark_base INTERFACE "-fprofile-use" "-fprofile-correction")
endif()
if(MULTIQUEUE_EXP_COVERAGE)
  target_compile_options(benchmark_base INTERFACE "--coverage")
  target_link_libraries(benchmark_base INTERFACE "gcov")
endif()

if(MULTIQUEUE_EXP_ASAN)
  target_compile_options(benchmark_base INTERFACE -fno-omit-frame-pointer)
  target_compile_options(benchmark_base INTERFACE -fsanitize=address)
  target_link_options(benchmark_base INTERFACE -fsanitize=address)
endif()
if(MULTIQUEUE_EXP_UBSAN)
  target_compile_options(benchmark_base INTERFACE -fno-omit-frame-pointer)
  target_compile_options(benchmark_base INTERFACE -fsanitize=undefined)
  target_link_options(benchmark_base INTERFACE -fsanitize=undefined)
endif()
if(MULTIQUEUE_EXP_TSAN)
  target_compile_options(benchmark_base INTERFACE -fno-omit-frame-pointer)
  target_compile_options(benchmark_base INTERFACE -fsanitize=thread)
  target_link_options(benchmark_base INTERFACE -fsanitize=thread)
endif()

add_library(mq_interface INTERFACE)
target_link_libraries(mq_interface INTERFACE multiqueue::multiqueue)
target_compile_definitions(mq_interface INTERFACE PQ_MQ)

function(add_tuning_variant bs d)
  set(name mq_bs_${bs}_d_${d})
  add_library(${name} INTERFACE)
  target_compile_definitions(${name} INTERFACE STICK_POLICY_NONE INSERTION_BUFFERSIZE=${bs} DELETION_BUFFERSIZE=${bs} HEAP_ARITY=${d})
  target_link_libraries(${name} INTERFACE mq_interface)
  list(APPEND mq_tuning_targets ${name})
  set(mq_tuning_targets ${mq_tuning_targets} PARENT_SCOPE)
endfunction()

foreach(bs 0 4 8 16 64 128 512)
  foreach(d 2 4 8 16 64)
    add_tuning_variant(${bs} ${d})
  endforeach()
endforeach()

add_library(mq_bs_0_std INTERFACE)
target_compile_definitions(mq_bs_0_std INTERFACE STICK_POLICY_NONE USE_STD_PQ INSERTION_BUFFERSIZE=0 DELETION_BUFFERSIZE=0)
target_link_libraries(mq_bs_0_std INTERFACE mq_interface)
list(APPEND mq_tuning_targets mq_bs_0_std)

add_library(mq_none INTERFACE)
target_compile_definitions(mq_none INTERFACE STICK_POLICY_NONE)
target_link_libraries(mq_none INTERFACE mq_interface)
list(APPEND mq_targets mq_none)

add_library(mq_none1 INTERFACE)
target_compile_definitions(mq_none1 INTERFACE STICK_POLICY_NONE MQ_NUM_COMPARE=1)
target_link_libraries(mq_none1 INTERFACE mq_interface)
list(APPEND mq_targets mq_none1)

add_library(mq_none2 INTERFACE)
target_compile_definitions(mq_none2 INTERFACE STICK_POLICY_NONE MQ_NUM_COMPARE=2)
target_link_libraries(mq_none2 INTERFACE mq_interface)
list(APPEND mq_targets mq_none2)

add_library(mq_none4 INTERFACE)
target_compile_definitions(mq_none4 INTERFACE STICK_POLICY_NONE MQ_NUM_COMPARE=4)
target_link_libraries(mq_none4 INTERFACE mq_interface)
list(APPEND mq_targets mq_none4)

add_library(mq_none8 INTERFACE)
target_compile_definitions(mq_none8 INTERFACE STICK_POLICY_NONE MQ_NUM_COMPARE=8)
target_link_libraries(mq_none8 INTERFACE mq_interface)
list(APPEND mq_targets mq_none8)

add_library(mq_random INTERFACE)
target_compile_definitions(mq_random INTERFACE STICK_POLICY_RANDOM)
target_link_libraries(mq_random INTERFACE mq_interface)
list(APPEND mq_targets mq_random)

# add_library(mq_random_strict INTERFACE)
# target_compile_definitions(mq_random_strict INTERFACE STICK_POLICY_RANDOM_STRICT)
# target_link_libraries(mq_random_strict INTERFACE mq_interface)
# list(APPEND mq_targets mq_random_strict)

add_library(mq_swapping INTERFACE)
target_compile_definitions(mq_swapping INTERFACE STICK_POLICY_SWAPPING)
target_link_libraries(mq_swapping INTERFACE mq_interface)
list(APPEND mq_targets mq_swapping)

# add_library(mq_swapping_lazy INTERFACE)
# target_compile_definitions(mq_swapping_lazy INTERFACE STICK_POLICY_SWAPPING_LAZY)
# target_link_libraries(mq_swapping_lazy INTERFACE mq_interface)
# list(APPEND mq_targets mq_swapping_lazy)

# add_library(mq_swapping_blocking INTERFACE)
# target_compile_definitions(mq_swapping_blocking INTERFACE STICK_POLICY_SWAPPING_BLOCKING)
# target_link_libraries(mq_swapping_blocking INTERFACE mq_interface)
# list(APPEND mq_targets mq_swapping_blocking)

# add_library(mq_perm INTERFACE)
# target_compile_definitions(mq_perm INTERFACE STICK_POLICY_PERMUTATION)
# target_link_libraries(mq_perm INTERFACE mq_interface)
# list(APPEND mq_targets mq_perm)

add_library(throughput INTERFACE)
target_sources(throughput INTERFACE throughput.cpp)
target_link_libraries(throughput INTERFACE thread_coordination benchmark_base)

set(wrapper_targets capq klsm256 klsm1024 klsm4096 linden spraylist tbb_pq)

foreach(target ${mq_tuning_targets} ${mq_targets} ${wrapper_targets})
  add_executable(throughput_${target})
  target_link_libraries(throughput_${target} PRIVATE ${target} throughput)
endforeach()

add_custom_target(throughput_mq_tuning)
foreach(t ${mq_tuning_targets})
  add_dependencies(throughput_mq_tuning throughput_${t})
endforeach()

add_custom_target(throughput_mq)
foreach(t ${mq_targets})
  add_dependencies(throughput_mq throughput_${t})
endforeach()

add_custom_target(throughput_wrapper)
foreach(t ${wrapper_targets})
  add_dependencies(throughput_wrapper throughput_${t})
endforeach()

add_custom_target(throughput_all)
foreach(t ${mq_targets} ${wrapper_targets})
  add_dependencies(throughput_all throughput_${t})
endforeach()

add_library(quality INTERFACE)
target_sources(quality INTERFACE quality.cpp evaluate_quality.cpp)
target_link_libraries(quality INTERFACE thread_coordination benchmark_base)

foreach(target ${mq_tuning_targets} ${mq_targets} ${wrapper_targets})
  add_executable(quality_${target})
  target_link_libraries(quality_${target} PRIVATE ${target} quality)
  if(BUILD_TESTING)
    add_test(NAME quality_${target}_small COMMAND /bin/bash -c "$<TARGET_FILE:quality_${target}> -p 10000 -n 10000 -j 1 | $<TARGET_FILE:evaluate_quality> -v")
    add_test(NAME quality_${target}_large COMMAND /bin/bash -c "$<TARGET_FILE:quality_${target}> -j 8 | $<TARGET_FILE:evaluate_quality> -v")
  endif()
endforeach()

add_custom_target(quality_mq)
foreach(t ${mq_targets})
  add_dependencies(quality_mq quality_${t})
endforeach()

add_custom_target(quality_all)
foreach(t ${mq_targets} ${wrapper_targets})
  add_dependencies(quality_all quality_${t})
endforeach()

add_library(insert_delete INTERFACE)
target_sources(insert_delete INTERFACE insert_delete.cpp)
target_link_libraries(insert_delete INTERFACE thread_coordination benchmark_base)

foreach(target ${mq_tuning_targets} ${mq_targets} ${wrapper_targets})
  add_executable(insert_delete_${target})
  target_link_libraries(insert_delete_${target} PRIVATE ${target} throughput)
endforeach()

add_library(sssp INTERFACE)
target_sources(sssp INTERFACE shortest_path.cpp)
target_link_libraries(sssp INTERFACE thread_coordination benchmark_base)

foreach(target ${mq_targets} ${wrapper_targets} tbb_q mf)
  add_executable(sssp_${target})
  target_link_libraries(sssp_${target} PRIVATE ${target} sssp)
  if(BUILD_TESTING)
    add_test(NAME sssp_${target}_small COMMAND /bin/bash -c "$<TARGET_FILE:sssp_${target}> -j 1 -f data/NY_graph.gr -c data/NY_solution.txt" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    add_test(NAME sssp_${target}_large COMMAND /bin/bash -c "$<TARGET_FILE:sssp_${target}> -j 8 -f data/CAL_graph.gr -c data/CAL_solution.txt" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
  endif()
endforeach()

add_library(knapsack_packed INTERFACE)
target_sources(knapsack_packed INTERFACE knapsack.cpp)
target_link_libraries(knapsack_packed INTERFACE thread_coordination benchmark_base)
target_compile_definitions(knapsack_packed INTERFACE HINT_MODE PACKED_VALUE)

add_library(knapsack_heap INTERFACE)
target_sources(knapsack_heap INTERFACE knapsack.cpp)
target_link_libraries(knapsack_heap INTERFACE thread_coordination benchmark_base)
target_compile_definitions(knapsack_heap INTERFACE HINT_MODE HEAP_VALUE)

add_library(knapsack_explicit INTERFACE)
target_sources(knapsack_explicit INTERFACE knapsack.cpp)
target_link_libraries(knapsack_explicit INTERFACE thread_coordination benchmark_base)
target_compile_definitions(knapsack_explicit INTERFACE HINT_MODE EXPLICIT_VALUE)

foreach(target ${targets})
  add_executable(knapsack_packed_${target})
  target_link_libraries(knapsack_packed_${target} PRIVATE ${target} knapsack_packed)
  add_dependencies(knapsack_all knapsack_packed_${target})
  if(BUILD_TESTING)
    add_test(NAME knapsack_packed_${target}_small COMMAND /bin/bash -c "$<TARGET_FILE:knapsack_packed_${target}> -j 1 -f  data/knapsack_small.txt" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    add_test(NAME knapsack_packed_${target}_large COMMAND /bin/bash -c "$<TARGET_FILE:knapsack_packed_${target}> -j 8 -f data/knapsack_large.txt" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
  endif()
endforeach()

foreach(target ${targets})
  add_executable(knapsack_heap_${target})
  target_link_libraries(knapsack_heap_${target} PRIVATE ${target} knapsack_heap tbbmalloc)
  add_dependencies(knapsack_all knapsack_heap_${target})
  if(BUILD_TESTING)
    add_test(NAME knapsack_heap_${target}_small COMMAND /bin/bash -c "$<TARGET_FILE:knapsack_heap_${target}> -j 1 -f  data/knapsack_small.txt" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    add_test(NAME knapsack_heap_${target}_large COMMAND /bin/bash -c "$<TARGET_FILE:knapsack_heap_${target}> -j 8 -f data/knapsack_large.txt" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
  endif()
endforeach()

foreach(target ${targets})
  add_executable(knapsack_explicit_${target})
  target_link_libraries(knapsack_explicit_${target} PRIVATE ${target} knapsack_explicit)
  add_dependencies(knapsack_all knapsack_explicit_${target})
  if(BUILD_TESTING)
    add_test(NAME knapsack_explicit_${target}_small COMMAND /bin/bash -c "$<TARGET_FILE:knapsack_explicit_${target}> -j 1 -f  data/knapsack_small.txt" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    add_test(NAME knapsack_explicit_${target}_large COMMAND /bin/bash -c "$<TARGET_FILE:knapsack_explicit_${target}> -j 8 -f data/knapsack_large.txt" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
  endif()
endforeach()
